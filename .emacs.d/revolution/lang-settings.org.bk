#+BEGIN_COMMENT
# ======================================================================
# @license Copyright 2016-2025 Pierre Schebath
# ---------------------
# 
# @brief This file has been written by Pierre Etienne Charles Schebath Cazoulat.
# 
# This source code, its related data and algorithms are Pierre Schebath
# Proprietary Information and shall be protected in strict confidence by
# the party who receives it.  It shall not be disclosed nor copied nor
# duplicated in whole or in part to any third party without Pierre Schebath
# written prior permission.
# ======================================================================
# lang-settings.org for revolution in ~/.emacs.d/revolution/
# @description: choice the langage from major-mode to load specifics configuration
# 
# Started on  Wed Jun  4 11:35:28 2025 @author Glider
## Last update Fri Oct  3 02:31:36 2025 @author Glider
# ======================================================================
#+END_COMMENT


#+NAME: lang_settings()
#+BEGIN_SRC emacs-lisp

    (defvar mode-associations
      '(("\\.jsx?\\'"       . web-mode)
        ("\\.tsx?\\'"       . web-mode)
        ("\\.[agj]sp\\'"    . web-mode)
        ("\\.as[cp]x\\'"    . web-mode)
        ("\\.erb\\'"        . web-mode)
        ("\\.mustache\\'"   . web-mode)
        ("\\.djhtml\\'"     . html-mode)
        ("\\.html?\\'"      . html-mode)
        ("\\.phtml\\'"      . html-mode)
        ("\\.php\\'"        . php-mode)
        ("\\.js\\'"         . js2-mode)
        ("\\.json\\'"       . json-mode)
        ("\\.yaml\\'"       . yaml-mode)
        ("\\.yml\\'"        . yaml-mode)
        ("\\.conf\\'"       . conf-mode)
        ("\\.cfg\\'"        . conf-mode)
        ("\\.env\\'"        . conf-mode)
        ("\\.gitignore\\'"  . conf-mode)
        ("\\.htaccess\\'"   . conf-mode)
        ("\\.c\\'"          . c-mode)
        ("\\.h\\'"          . c-mode)
        ("\\.cpp\\'"        . c++-mode)
        ("\\.cc\\'"         . c++-mode)
        ("\\.cxx\\'"        . c++-mode)
        ("\\.hpp\\'"        . c++-mode)
        ("\\.el\\'"         . emacs-lisp-mode)
        ("\\.lisp\\'"       . lisp-mode)
        ("\\.scm\\'"        . scheme-mode)
        ("\\.css\\'"        . css-mode)
        ("\\.org\\'"        . org-mode)
        ("\\.xml\\'"        . nxml-mode)))

    (defun register-auto-modes ()
      "Ajoute les associations une seule fois à `auto-mode-alist`."
      (dolist (entry mode-associations)
        (let ((pattern (car entry))
              (mode    (cdr entry)))
          (add-to-list 'auto-mode-alist (cons pattern mode)))))

    (defvar lang-settings-dir
      (expand-file-name "revolution/lang-settings/" user-emacs-directory)
      "Dossier contenant les fichiers de configuration par langage.")

    (defun load-lang-settings ()
      "Charge dynamiquement le fichier de configuration associé au mode majeur."
      (when buffer-file-name
        (let* ((mode (symbol-name major-mode))
               (file-mode (expand-file-name (concat mode ".el") lang-settings-dir)))
          (if (file-exists-p file-mode)
              (progn
                (load file-mode nil t)
                (message " [Emacs Revolution] Charge la configuration %s" mode))
            (message " [Emacs Revolution] Pas de config pour %s" mode)))))

    (defun lang-settings-init ()
      "Initialise les réglages de langage pour Emacs Revolution."
      (message " [Emacs Revolution] file path [%s]" lang-settings-dir)
      (register-auto-modes)
      (load-lang-settings)
      (add-hook 'after-change-major-mode-hook #'load-lang-settings))

    (add-hook 'find-file-hook #'lang-settings-init)

    
#+END_SRC

#+CALL: lang_settings()
